#version 450

struct Material
{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct Light
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec3 fragmentPosition;
in vec3 normal;
in vec2 texCoords;

uniform Light light;
uniform Material material;

layout(location = 0) out vec4 color;
layout(location = 1) out vec4 brightColor;

void main()
{
	//color = vec4(0.6f,0.4f,0.0f,1.0f);
	//brightColor = vec4(0.0f,0.0f,0.0f,1.0f);
	//color = texture(material.diffuse,texCoords);
	
	//ambient lighting
	vec3 ambient = light.ambient * vec3(texture(material.diffuse,texCoords));
	//diffuse lighting
	vec3 norm = normalize(normal);
	//vec3 lightDirection = normalize(light.position-fragmentPosition);
	vec3 lightDirection;
	//if(light.position.y >= -0.5f && light.position.y <= 1.0f)
		lightDirection = normalize(light.position);
	//else
	//	lightDirection = vec3(0.0f);
	float diff = max(dot(norm,lightDirection),0.0);
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,texCoords));
	//specular lighting
	//vec3 viewDirection = normalize(viewPosition - fragmentPosition);
	//vec3 reflectDirection = reflect(-lightDirection,norm);
	//float spec = 0.0f;
	
	//	spec = pow(max(dot(viewDirection,reflectDirection),0.0),material.shininess);
	//vec3 halfwayDirection = normalize(lightDirection + viewDirection);
	//if(diff > 0.0f)
	//	spec = pow(max(dot(norm,halfwayDirection),0.0f),material.shininess);
	//vec3 specular = light.specular * spec * vec3(texture(material.specular,texCoords));
	
	//terrain has no specular
	color = vec4(ambient + diffuse ,1.0);
	
	float brightness = dot(color.rgb, vec3(0.2126, 0.7152, 0.0722));
	if(brightness > 0.7f)
		brightColor = vec4(color.rgb,1.0f);
	else
		brightColor = vec4(0.0f,0.0f,0.0f,1.0f);
	
}
