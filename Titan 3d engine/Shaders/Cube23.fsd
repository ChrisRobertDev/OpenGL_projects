#version 450

struct Material
{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct Light
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec3 fragmentPosition;
in vec3 normal;
in vec2 texCoords;

uniform vec3 viewPosition;
uniform Material material;
uniform Light light;
uniform bool tester;

out vec4 fragmentColor;

void main()
{
	
	//ambient lighting
	vec3 ambient = light.ambient * vec3(texture(material.diffuse,texCoords));
	//diffuse lighting
	vec3 norm = normalize(normal);
	//vec3 lightDirection = normalize(light.position-fragmentPosition);
	vec3 lightDirection = normalize(light.position);
	float diff = max(dot(norm,lightDirection),0.0);
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,texCoords));
	//specular lighting
	vec3 viewDirection = normalize(lightDirection - fragmentPosition);
	vec3 reflectDirection = reflect(-lightDirection,norm);
	float spec = 0.0f;
	if(diff > 0.0f)
		spec = pow(max(dot(viewDirection,reflectDirection),0.0),material.shininess);
	vec3 specular = light.specular * spec * vec3(texture(material.specular,texCoords));
	if(tester == true)
		fragmentColor = vec4(ambient + diffuse + specular,1.0);
	else
		fragmentColor = vec4(ambient + diffuse ,1.0);
}
