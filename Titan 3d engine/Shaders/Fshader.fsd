#version 450

struct Material 
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};
struct Light 
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
in vec3 fragmentPosition;
in vec3 normal;
in vec2 texCoords;

//uniform vec3 lightPosition;
uniform vec3 viewPosition;
//uniform vec3 cubeColor;
//uniform vec3 lightColor;

uniform Material material;
uniform Light light;

uniform sampler2D myTexture1;
//uniform sampler2D myTexture2;

out vec4 fragColor;




void main(){
	//ambient lighting
	vec3 ambient = material.ambient * light.ambient;
	
	//diffuse lighting
	vec3 lightDirection = normalize(light.position - fragmentPosition);
	vec3 norm = normalize(normal);
	float diff = max(dot(norm,lightDirection),0.0f);
	vec3 diffuse = light.diffuse *(diff*material.diffuse);
	
	//specular lighting
	vec3 viewDirection = normalize(viewPosition - fragmentPosition);
	vec3 reflectDirection = reflect(-lightDirection,norm);
	float spec = pow(max(dot(viewDirection,reflectDirection),0.0f),material.shininess*128);
	vec3 specular = light.specular * (spec * material.specular);
	
	//result
	vec3 result = specular + ambient + diffuse;
	
	//fragColor = texture(myTexture1,texCoords);
	//fragColor = texture(myTexture1,texCoords)*vec4(result,1.0);
	//fragColor = mix(texture(myTexture1,texCoords),texture(myTexture2,vec2(1.0 - texCoords.x,texCoords.y)),0.2);
	fragColor = vec4(result,1.0f);
}